{"pageProps":{"post":{"slug":"aoc-2021-reflections","title":"Advent of Code 2021 Reflections","excerpt":"Reflections on 50 stars of Advent Of Code 2021","date":"2022-01-06T12:00:00.000Z","coverImage":"/assets/blog/aoc-2021-reflections/tzyl-aoc2021.png","ogImage":"/assets/blog/aoc-2021-reflections/tzyl-aoc2021.png","content":"\n## Intro\n\nI thoroughly enjoyed working through the [Advent of Code] 2021 problems this\nyear and feel accomplishment after attaining all 50 stars. My language of choice\nthis time was Python 3.10 which was refreshing to play with some of the modern\nfeatures given I work mostly in TypeScript these days.\n\n## Tools\n\nThe supporting toolchain for Python I used to write code quickly was:\n\n- black\n- isort\n- flake8\n- mypy\n\nThe addition of [PEP 484] and application in `mypy` felt similar to TypeScript\nwith flexible typing on top of a dynamically typed language allowing for fast\niteration. The combination of `black`/`isort`/`flake8` for formatting and\nlinting also worked great as the analog of `prettier`/`eslint` for JS.\n\n## Solutions\n\nCheck out my repo [tzyl/aoc21] for full solutions and accompanying notes\nexplaining the high level techniques employed.\n\n[advent of code]: https://adventofcode.com\n[pep 484]: https://www.python.org/dev/peps/pep-0484\n[tzyl/aoc21]: https://github.com/tzyl/aoc21\n","mdxSource":{"compiledSource":"var f=Object.defineProperty,m=Object.defineProperties;var d=Object.getOwnPropertyDescriptors;var i=Object.getOwnPropertySymbols;var l=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;var p=(e,o,n)=>o in e?f(e,o,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[o]=n,a=(e,o)=>{for(var n in o||(o={}))l.call(o,n)&&p(e,n,o[n]);if(i)for(var n of i(o))r.call(o,n)&&p(e,n,o[n]);return e},h=(e,o)=>m(e,d(o));var s=(e,o)=>{var n={};for(var t in e)l.call(e,t)&&o.indexOf(t)<0&&(n[t]=e[t]);if(e!=null&&i)for(var t of i(e))o.indexOf(t)<0&&r.call(e,t)&&(n[t]=e[t]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var t=n,{components:e}=t,o=s(t,[\"components\"]);return mdx(MDXLayout,h(a(a({},layoutProps),o),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h2\",null,\"Intro\"),mdx(\"p\",null,\"I thoroughly enjoyed working through the \",mdx(\"a\",a({parentName:\"p\"},{href:\"https://adventofcode.com\",target:\"_blank\",rel:\"nofollow noopener noreferrer\"}),\"Advent of Code\"),` 2021 problems this\nyear and feel accomplishment after attaining all 50 stars. My language of choice\nthis time was Python 3.10 which was refreshing to play with some of the modern\nfeatures given I work mostly in TypeScript these days.`),mdx(\"h2\",null,\"Tools\"),mdx(\"p\",null,\"The supporting toolchain for Python I used to write code quickly was:\"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},\"black\"),mdx(\"li\",{parentName:\"ul\"},\"isort\"),mdx(\"li\",{parentName:\"ul\"},\"flake8\"),mdx(\"li\",{parentName:\"ul\"},\"mypy\")),mdx(\"p\",null,\"The addition of \",mdx(\"a\",a({parentName:\"p\"},{href:\"https://www.python.org/dev/peps/pep-0484\",target:\"_blank\",rel:\"nofollow noopener noreferrer\"}),\"PEP 484\"),\" and application in \",mdx(\"inlineCode\",{parentName:\"p\"},\"mypy\"),` felt similar to TypeScript\nwith flexible typing on top of a dynamically typed language allowing for fast\niteration. The combination of `,mdx(\"inlineCode\",{parentName:\"p\"},\"black\"),\"/\",mdx(\"inlineCode\",{parentName:\"p\"},\"isort\"),\"/\",mdx(\"inlineCode\",{parentName:\"p\"},\"flake8\"),` for formatting and\nlinting also worked great as the analog of `,mdx(\"inlineCode\",{parentName:\"p\"},\"prettier\"),\"/\",mdx(\"inlineCode\",{parentName:\"p\"},\"eslint\"),\" for JS.\"),mdx(\"h2\",null,\"Solutions\"),mdx(\"p\",null,\"Check out my repo \",mdx(\"a\",a({parentName:\"p\"},{href:\"https://github.com/tzyl/aoc21\",target:\"_blank\",rel:\"nofollow noopener noreferrer\"}),\"tzyl/aoc21\"),` for full solutions and accompanying notes\nexplaining the high level techniques employed.`))}MDXContent.isMDXComponent=!0;\n","scope":{}}}},"__N_SSG":true}